#include <iostream>
#include <vector>

void merge(std::vector<int>& nums, int start, int mid, int end, int target, int& first, int& last) {
    int i = start;
    int j = mid + 1;

    // Find the first occurrence
    while (i <= mid && nums[i] != target) {
        i++;
    }
    if (i <= mid && nums[i] == target) {
        first = i;
    }

    // Find the last occurrence
    while (j <= end && nums[j] == target) {
        j++;
    }
    if (j - 1 >= mid && nums[j - 1] == target) {
        last = j - 1;
    }

    // Perform the regular merge process
    std::vector<int> merged;
    while (start <= mid && j <= end) {
        if (nums[start] < nums[j]) {
            merged.push_back(nums[start++]);
        } else {
            merged.push_back(nums[j++]);
        }
    }

    while (start <= mid) {
        merged.push_back(nums[start++]);
    }

    while (j <= end) {
        merged.push_back(nums[j++]);
    }

    for (int k = 0; k < merged.size(); k++) {
        nums[start + k] = merged[k];
    }
}

void mergeSort(std::vector<int>& nums, int start, int end, int target, int& first, int& last) {
    if (start < end) {
        int mid = start + (end - start) / 2;
        mergeSort(nums, start, mid, target, first, last);
        mergeSort(nums, mid + 1, end, target, first, last);
        merge(nums, start, mid, end, target, first, last);
    }
}

std::pair<int, int> findOccurrences(std::vector<int>& nums, int target) {
    int first = -1;
    int last = -1;
    mergeSort(nums, 0, nums.size() - 1, target, first, last);
    return std::make_pair(first, last);
}

int main() {
    std::vector<int> nums = {1, 2, 2, 2, 3, 3, 4, 5, 5};
    int target = 2;

    std::pair<int, int> occurrences = findOccurrences(nums, target);
    int first = occurrences.first;
    int last = occurrences.second;

    if (first != -1 && last != -1) {
        std::cout << "First occurrence: " << first << std::endl;
        std::cout << "Last occurrence: " << last << std::endl;
    } else {
        std::cout << "Target not found in the array." << std::endl;
    }

    return 0;
}
